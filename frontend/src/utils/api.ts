// Backend API configuration
const API_BASE_URL = 'http://localhost:8000';

// Types for API responses
export interface UploadResponse {
  message: string;
  file_info: {
    filename: string;
    size: number;
    size_mb: string;
    content_type: string;
    type: 'single_file' | 'zip_extracted' | 'zip_failed';
    path?: string;
    extraction?: {
      extracted_folder: string;
      extracted_path: string;
      total_files: number;
      nifti_files_count: number;
      nifti_files: string[];
      all_files: Array<{
        filename: string;
        original_path: string;
        size: number;
        size_mb: string;
      }>;
    };
    error?: string;
  };
}

// New interface for inference response
export interface InferenceResponse {
  message: string;
  folder_name: string;
  timing: {
    preprocess_time: number;
    inference_time: number;
    postprocess_time: number;
    total_time: number;
  };
  segmentation_info: {
    shape: number[];
    classes_found: number[];
    class_counts: Record<string, number>;
    total_segmented_voxels: number;
  };
  saved_file: string;
  preprocessing_config: Record<string, never>;
}

export interface ApiError {
  detail: string;
}

/**
 * Upload MRI file to backend
 */
export const uploadMriFile = async (
  file: File,
  onProgress?: (progress: number) => void
): Promise<UploadResponse> => {
  return new Promise((resolve, reject) => {
    const formData = new FormData();
    formData.append('file', file);

    const xhr = new XMLHttpRequest();

    // Track upload progress
    if (onProgress) {
      xhr.upload.addEventListener('progress', (event) => {
        if (event.lengthComputable) {
          const progress = Math.round((event.loaded / event.total) * 100);
          onProgress(progress);
        }
      });
    }

    // Handle successful response
    xhr.addEventListener('load', () => {
      if (xhr.status >= 200 && xhr.status < 300) {
        try {
          const response: UploadResponse = JSON.parse(xhr.responseText);
          resolve(response);
        } catch (error) {
          reject(new Error('RƒÉspuns invalid de la server'));
        }
      } else {
        try {
          const errorResponse: ApiError = JSON.parse(xhr.responseText);
          reject(new Error(errorResponse.detail || `Eroare HTTP: ${xhr.status}`));
        } catch (error) {
          reject(new Error(`Eroare HTTP: ${xhr.status}`));
        }
      }
    });

    // Handle network errors
    xhr.addEventListener('error', () => {
      reject(new Error('Eroare de re»õea. VerificƒÉ dacƒÉ serverul ruleazƒÉ.'));
    });

    // Handle timeout
    xhr.addEventListener('timeout', () => {
      reject(new Error('Timeout - upload-ul a luat prea mult timp.'));
    });

    // Configure and send request
    xhr.timeout = 300000; // 5 minutes timeout
    xhr.open('POST', `${API_BASE_URL}/files/upload-mri`);
    xhr.send(formData);
  });
};

/**
 * Run inference on a folder to generate segmentation
 */
export const runInferenceOnFolder = async (folderName: string): Promise<InferenceResponse> => {
  const response = await fetch(`${API_BASE_URL}/inference/folder/${encodeURIComponent(folderName)}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      save_result: true,
      output_filename: null // Use default naming
    })
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ detail: 'Eroare la inferen»õƒÉ' }));
    throw new Error(errorData.detail || `Eroare HTTP: ${response.status}`);
  }

  return response.json();
};

/**
 * Download segmentation result
 */
export const downloadSegmentationResult = async (folderName: string): Promise<File> => {
  try {
    const response = await fetch(`${API_BASE_URL}/inference/results/${encodeURIComponent(folderName)}/download`);

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ detail: 'Eroare la descƒÉrcarea segmentƒÉrii' }));
      throw new Error(errorData.detail || `Eroare HTTP: ${response.status}`);
    }

    // Get the blob
    const blob = await response.blob();

    // Create File object for the segmentation
    const segmentationFilename = `${folderName}-seg.nii.gz`;
    const file = new File([blob], segmentationFilename, {
      type: blob.type || 'application/gzip',
      lastModified: Date.now()
    });

    console.log(`[API] Segmentare descƒÉrcatƒÉ: ${segmentationFilename} (${(blob.size / 1024 / 1024).toFixed(2)} MB)`);

    return file;

  } catch (error) {
    console.error('Eroare la descƒÉrcarea segmentƒÉrii:', error);
    throw error;
  }
};

/**
 * Extract folder name from a file path with improved logic and debugging
 */
const extractFolderFromFilePath = async (filename: string): Promise<string | null> => {
  console.log(`üîç [DEBUG] Trying to extract folder from: "${filename}"`);

  // Method 1: Direct folder path (folder/file.nii.gz)
  if (filename.includes('/')) {
    const folderName = filename.split('/')[0];
    console.log(`‚úÖ [DEBUG] Found folder from path: "${folderName}"`);
    return folderName;
  }

  // Method 2: Extract from common naming patterns
  const commonSuffixes = [
    '_t1n', '_t1c', '_t2w', '_t2f', '_flair',
    '-t1n', '-t1c', '-t2w', '-t2f', '-flair',
    '_T1N', '_T1C', '_T2W', '_T2F', '_FLAIR',
    '-T1N', '-T1C', '-T2W', '-T2F', '-FLAIR',
    '-seg', '_seg', '-segmentation', '_segmentation'
  ];

  const baseName = filename.replace(/\.(nii|nii\.gz)$/i, '');
  console.log(`üîç [DEBUG] Base name without extension: "${baseName}"`);

  for (const suffix of commonSuffixes) {
    if (baseName.toLowerCase().endsWith(suffix.toLowerCase())) {
      const folderName = baseName.slice(0, -suffix.length);
      console.log(`‚úÖ [DEBUG] Found folder from suffix "${suffix}": "${folderName}"`);
      return folderName;
    }
  }

  // Method 3: Check if this file is part of a folder on the server
  try {
    console.log(`üîç [DEBUG] Checking server for folders containing this file...`);
    const uploadedFiles = await getUploadedFiles();

    // Look for folders that contain this exact filename
    for (const item of uploadedFiles.items) {
      if (item.type === 'folder' && item.nifti_files?.includes(filename)) {
        console.log(`‚úÖ [DEBUG] Found file in server folder: "${item.name}"`);
        return item.name;
      }

      // Also check if any file in the folder matches the basename
      if (item.type === 'folder' && item.nifti_files) {
        const fileBaseName = filename.replace(/\.(nii|nii\.gz)$/i, '');
        for (const niftiFile of item.nifti_files) {
          const niftiBaseName = niftiFile.replace(/\.(nii|nii\.gz)$/i, '');
          // Check if they share the same base (ignoring modality suffixes)
          if (niftiBaseName.toLowerCase().includes(fileBaseName.toLowerCase()) ||
              fileBaseName.toLowerCase().includes(niftiBaseName.toLowerCase())) {
            console.log(`‚úÖ [DEBUG] Found related file in folder "${item.name}": "${niftiFile}"`);
            return item.name;
          }
        }
      }
    }

    // Method 4: Look for folders with similar names
    const fileBaseName = baseName.toLowerCase();
    for (const item of uploadedFiles.items) {
      if (item.type === 'folder') {
        const folderNameLower = item.name.toLowerCase();
        // Check if folder name is contained in filename or vice versa
        if (fileBaseName.includes(folderNameLower) || folderNameLower.includes(fileBaseName)) {
          console.log(`‚úÖ [DEBUG] Found similar folder name: "${item.name}"`);
          return item.name;
        }
      }
    }

  } catch (error) {
    console.error(`‚ùå [DEBUG] Error checking server folders:`, error);
  }

  console.log(`‚ùå [DEBUG] Could not determine folder for file: "${filename}"`);
  console.log(`üí° [DEBUG] Available options:`);
  console.log(`   - Upload a ZIP with all modalities (t1n, t1c, t2w, t2f)`);
  console.log(`   - Ensure file naming follows pattern: "patient_001_t1c.nii.gz"`);
  console.log(`   - Check that file is part of a complete folder on server`);

  return null;
};

/**
 * Enhanced generateMriAnalysis with better error messages
 */
export async function generateMriAnalysis(
  file: File,
  prompt: string
): Promise<{
  analysis: string;
  segmentationFile?: File;
  inferenceResult?: InferenceResponse;
}> {
  console.log('üß† Starting MRI Analysis for:', file.name);
  console.log('üìù Prompt:', prompt);

  try {
    // Step 1: Extract folder name from current file
    const folderName = await extractFolderFromFilePath(file.name);

    if (!folderName) {
      // Enhanced error message with debugging info
      const uploadedFiles = await getUploadedFiles().catch(() => ({ items: [] }));
      const folders = uploadedFiles.items.filter(item => item.type === 'folder');

      let errorMessage = `Nu s-a putut determina folderul pentru fi»ôierul "${file.name}".

DEBUGGING INFO:
- Nume fi»ôier: "${file.name}"
- Foldere disponibile pe server: ${folders.map(f => f.name).join(', ') || 'Niciun folder'}

SOLU»öII:
1. AsigurƒÉ-te cƒÉ ai √ÆncƒÉrcat un ZIP cu toate modalitƒÉ»õile (t1n, t1c, t2w, t2f)
2. VerificƒÉ cƒÉ fi»ôierul face parte dintr-un folder complet pe server
3. Folose»ôte denumiri standard: "patient_001_t1c.nii.gz"`;

      if (folders.length > 0) {
        errorMessage += `\n\nüí° SUGESTIE: √éncearcƒÉ sƒÉ √ÆncƒÉrci unul din folderele disponibile: ${folders.map(f => f.name).join(', ')}`;
      }

      throw new Error(errorMessage);
    }

    console.log(`üìÅ Folder detectat: ${folderName}`);

    // Continue with original logic...
    console.log('üîÑ Se ruleazƒÉ inferen»õa pe folder...');
    const inferenceResult = await runInferenceOnFolder(folderName);

    console.log('‚úÖ Inferen»õa completƒÉ!', {
      timing: inferenceResult.timing,
      classes: inferenceResult.segmentation_info.classes_found,
      savedFile: inferenceResult.saved_file
    });

    console.log('üì• Se descarcƒÉ fi»ôierul de segmentare...');
    const segmentationFile = await downloadSegmentationResult(folderName);

    console.log('‚úÖ Segmentare descƒÉrcatƒÉ cu succes!');

    const analysis = generateAnalysisText(inferenceResult, prompt);

    return {
      analysis,
      segmentationFile,
      inferenceResult
    };

  } catch (error) {
    console.error('‚ùå Eroare la analiza MRI:', error);

    return {
      analysis: `EROARE LA ANALIZA MRI

${error instanceof Error ? error.message : 'Eroare necunoscutƒÉ'}

Pentru mai multe informa»õii, verificƒÉ consola browserului (F12 ‚Üí Console).`
    };
  }
}

/**
 * Generate human-readable analysis text from inference results
 */
function generateAnalysisText(inferenceResult: InferenceResponse, originalPrompt: string): string {
  const { segmentation_info, timing, folder_name } = inferenceResult;
  
  const totalVoxels = segmentation_info.shape.reduce((a, b) => a * b, 1);
  const segmentedVoxels = segmentation_info.total_segmented_voxels;
  const segmentationPercentage = ((segmentedVoxels / totalVoxels) * 100).toFixed(2);

  // Map class numbers to clinical names
  const classNames: Record<number, string> = {
    0: 'Background',
    1: 'NETC (Non-Enhancing Tumor Core)',
    2: 'SNFH (Surrounding FLAIR Hyperintensity)', 
    3: 'ET (Enhancing Tumor)',
    4: 'RC (Resection Cavity)'
  };

  const foundClasses = segmentation_info.classes_found
    .filter(cls => cls > 0) // Exclude background
    .map(cls => classNames[cls] || `Class ${cls}`)
    .join(', ');

  return `ANALIZƒÇ AUTOMATƒÇ MRI - SEGMENTAREA GLIOMELOR POST-TRATAMENT

Dataset analizat: ${folder_name}
Prompt utilizator: "${originalPrompt}"

REZULTATE SEGMENTARE:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä Statistici generale:
‚Ä¢ Dimensiuni volum: ${segmentation_info.shape.join(' √ó ')} voxeli
‚Ä¢ Total voxeli segmenta»õi: ${segmentedVoxels.toLocaleString()} (${segmentationPercentage}% din volum)
‚Ä¢ Clase identificate: ${foundClasses || 'Nicio »õesut patologic detectat'}

üìà Distribu»õia »õesuturilor:
${Object.entries(segmentation_info.class_counts)
  .filter(([cls]) => parseInt(cls) > 0) // Exclude background
  .map(([cls, count]) => {
    const className = classNames[parseInt(cls)] || `Class ${cls}`;
    const percentage = ((count / totalVoxels) * 100).toFixed(3);
    return `‚Ä¢ ${className}: ${count.toLocaleString()} voxeli (${percentage}%)`;
  }).join('\n')}

‚è±Ô∏è Performan»õƒÉ procesare:
‚Ä¢ Preprocesare: ${timing.preprocess_time.toFixed(2)}s
‚Ä¢ Inferen»õƒÉ model AI: ${timing.inference_time.toFixed(2)}s  
‚Ä¢ Postprocesare: ${timing.postprocess_time.toFixed(2)}s
‚Ä¢ **Total: ${timing.total_time.toFixed(2)}s**

üîç INTERPRETARE CLINICƒÇ:
${generateClinicalInterpretation(segmentation_info)}

‚ö†Ô∏è NOTƒÇ IMPORTANTƒÇ:
AceastƒÉ analizƒÉ este generatƒÉ automat de un model de inteligen»õƒÉ artificialƒÉ »ôi are scop de asisten»õƒÉ √Æn diagnozƒÉ. Rezultatele TREBUIE sƒÉ fie validate de un radiolog calificat √Ænainte de orice decizie clinicƒÉ.

üî¨ Model utilizat: MedNeXt (MONAI) - BraTS 2023
üìÖ Data analizei: ${new Date().toLocaleString('ro-RO')}
üè• Platforma: MediView v1.0.0`;
}

/**
 * Generate clinical interpretation based on segmentation results
 */
function generateClinicalInterpretation(segmentationInfo: InferenceResponse['segmentation_info']): string {
  const { classes_found, class_counts, total_segmented_voxels } = segmentationInfo;
  
  if (total_segmented_voxels === 0) {
    return `Nu s-au detectat anomalii semnificative √Æn scanul MRI. »öesutul cerebral pare sƒÉ prezinte caracteristici normale √Æn toate modalitƒÉ»õile analizate.

RECOMANDƒÇRI:
‚Ä¢ Monitorizare de rutinƒÉ conform protocolului clinic
‚Ä¢ Reevaluare la intervalele standard pentru pacientul respectiv`;
  }

  const hasET = classes_found.includes(3);
  const hasNETC = classes_found.includes(1);
  const hasSNFH = classes_found.includes(2);
  const hasRC = classes_found.includes(4);

  let interpretation = '';

  if (hasET && hasNETC) {
    interpretation += `Se observƒÉ prezen»õa unei tumori active cu componente enhancing »ôi non-enhancing, sugestivƒÉ pentru gliom de grad √Ænalt.

CARACTERISTICI OBSERVATE:
‚Ä¢ ComponentƒÉ enhancing (ET): ${class_counts[3]?.toLocaleString() || 0} voxeli - indicƒÉ »õesut tumoral activ
‚Ä¢ ComponentƒÉ non-enhancing (NETC): ${class_counts[1]?.toLocaleString() || 0} voxeli - posibilƒÉ expansiune tumoralƒÉ`;
  } else if (hasET) {
    interpretation += `Se detecteazƒÉ »õesut tumoral cu enhancement, indic√¢nd activitate tumoralƒÉ.

OBSERVA»öII:
‚Ä¢ ComponentƒÉ enhancing: ${class_counts[3]?.toLocaleString() || 0} voxeli`;
  } else if (hasNETC) {
    interpretation += `Se observƒÉ »õesut tumoral fƒÉrƒÉ enhancement significant.

OBSERVA»öII:  
‚Ä¢ ComponentƒÉ non-enhancing: ${class_counts[1]?.toLocaleString() || 0} voxeli`;
  }

  if (hasSNFH) {
    interpretation += `\n‚Ä¢ Hiperintensitate FLAIR circumjacentƒÉ: ${class_counts[2]?.toLocaleString() || 0} voxeli - poate indica edem sau infiltra»õie tumoralƒÉ`;
  }

  if (hasRC) {
    interpretation += `\n‚Ä¢ Cavitate de rezec»õie: ${class_counts[4]?.toLocaleString() || 0} voxeli - consistent cu interven»õie chirurgicalƒÉ anterioarƒÉ`;
  }

  interpretation += `

RECOMANDƒÇRI:
‚Ä¢ Corela»õie cu simptomatologia clinicƒÉ
‚Ä¢ Compara»õie cu scanƒÉrile anterioare pentru evaluarea progresiei
‚Ä¢ Consulta»õie multidisciplinarƒÉ (neurochirurg, neuro-oncolog, radioterapeut)
‚Ä¢ Follow-up conform protocolului institu»õional pentru gliome`;

  return interpretation;
}

// Keep all existing functions unchanged...
/**
 * Get list of uploaded files
 */
export const getUploadedFiles = async (): Promise<{
  items: Array<{
    name: string;
    type: 'file' | 'folder';
    size: number;
    size_mb: string;
    modified: number;
    path: string;
    extension?: string;
    files_count?: number;
    nifti_count?: number;
    nifti_files?: string[];
  }>;
  total_count: number;
  files_count: number;
  folders_count: number;
}> => {
  const response = await fetch(`${API_BASE_URL}/files/`);

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ detail: 'Eroare necunoscutƒÉ' }));
    throw new Error(errorData.detail || `Eroare HTTP: ${response.status}`);
  }

  return response.json();
};

/**
 * Delete uploaded file
 */
export const deleteUploadedFile = async (filename: string): Promise<{ message: string }> => {
  const response = await fetch(`${API_BASE_URL}/files/${encodeURIComponent(filename)}`, {
    method: 'DELETE'
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ detail: 'Eroare necunoscutƒÉ' }));
    throw new Error(errorData.detail || `Eroare HTTP: ${response.status}`);
  }

  return response.json();
};

/**
 * Download file from backend
 */
export const downloadFile = async (filename: string): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/files/${encodeURIComponent(filename)}/download`);

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ detail: 'Eroare la descƒÉrcare' }));
      throw new Error(errorData.detail || `Eroare HTTP: ${response.status}`);
    }

    // Ob»õine blob-ul fi»ôierului
    const blob = await response.blob();

    // CreeazƒÉ un URL temporar pentru blob
    const url = window.URL.createObjectURL(blob);

    // CreeazƒÉ un link temporar »ôi declan»ôeazƒÉ descƒÉrcarea
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();

    // CurƒÉ»õƒÉ
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);

  } catch (error) {
    console.error('Eroare la descƒÉrcarea fi»ôierului:', error);
    throw error;
  }
};

/**
 * Download file as attachment (forces save dialog)
 */
export const downloadFileAttachment = async (filename: string): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/files/${encodeURIComponent(filename)}/download-attachment`);

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ detail: 'Eroare la descƒÉrcare' }));
      throw new Error(errorData.detail || `Eroare HTTP: ${response.status}`);
    }

    // Ob»õine blob-ul fi»ôierului
    const blob = await response.blob();

    // CreeazƒÉ un URL temporar pentru blob
    const url = window.URL.createObjectURL(blob);

    // CreeazƒÉ un link temporar »ôi declan»ôeazƒÉ descƒÉrcarea
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();

    // CurƒÉ»õƒÉ
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);

  } catch (error) {
    console.error('Eroare la descƒÉrcarea attachment:', error);
    throw error;
  }
};

/**
 * Get info about a specific file
 */
export const getFileInfo = async (filename: string): Promise<{
  filename: string;
  size: number;
  size_mb: string;
  modified: number;
  created: number;
  path: string;
  extension: string;
}> => {
  const response = await fetch(`${API_BASE_URL}/files/${encodeURIComponent(filename)}/info`);

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ detail: 'Eroare necunoscutƒÉ' }));
    throw new Error(errorData.detail || `Eroare HTTP: ${response.status}`);
  }

  return response.json();
};

export const loadFileForViewing = async (filename: string): Promise<File> => {
  try {
    console.log(`[API] √éncarcƒÉ fi»ôierul pentru vizualizare: ${filename}`);

    const response = await fetch(`${API_BASE_URL}/files/${encodeURIComponent(filename)}/download`);

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ detail: 'Eroare la √ÆncƒÉrcare' }));
      throw new Error(errorData.detail || `Eroare HTTP: ${response.status}`);
    }

    // Ob»õine blob-ul fi»ôierului
    const blob = await response.blob();

    // CreeazƒÉ un obiect File din blob (nu doar salveazƒÉ pe disc)
    const file = new File([blob], filename, {
      type: blob.type || 'application/octet-stream',
      lastModified: Date.now()
    });

    console.log(`[API] Fi»ôier √ÆncƒÉrcat pentru vizualizare: ${filename} (${(blob.size / 1024 / 1024).toFixed(2)} MB)`);

    return file;

  } catch (error) {
    console.error('Eroare la √ÆncƒÉrcarea fi»ôierului pentru vizualizare:', error);
    throw error;
  }
};

/**
 * VerificƒÉ dacƒÉ un fi»ôier existƒÉ pe server (pentru validarea restore-ului)
 */
export const checkFileExists = async (filename: string): Promise<boolean> => {
  try {
    const response = await fetch(`${API_BASE_URL}/files/${encodeURIComponent(filename)}/info`);
    return response.ok;
  } catch (error) {
    console.error('Eroare la verificarea existen»õei fi»ôierului:', error);
    return false;
  }
};

/**
 * Ob»õine lista fi»ôierelor NIfTI disponibile pe server
 */
export const getAvailableNiftiFiles = async (): Promise<string[]> => {
  try {
    const response = await getUploadedFiles();

    // FiltreazƒÉ doar fi»ôierele NIfTI
    const niftiFiles = response.items
      .filter(item =>
        item.type === 'file' &&
        (item.name.endsWith('.nii') || item.name.endsWith('.nii.gz'))
      )
      .map(item => item.name);

    return niftiFiles;
  } catch (error) {
    console.error('Eroare la ob»õinerea listei de fi»ôiere NIfTI:', error);
    return [];
  }
};

export const fileToDataUrl = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = reject;
    reader.readAsDataURL(file);
  });
};